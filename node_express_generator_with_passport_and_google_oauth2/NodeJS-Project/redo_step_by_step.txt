< A. GOOGLE ACCOUNT "MUST-HAVE">
(1) Google account
(2) Client ID - setup at google cloud, set up a cloud client
(3) Client Secret (password phrase) - setup at google cloud, ONLY SHOW ONE TIME

< B. NODE.js + EXPRESS.js related steps >
(((((( 1 ))))))
npm i passport
npm i express-session
npm i passport-google-oauth2
(((((( 2 ))))))
In app.js (using ES Module importing method)
1. import session from 'express-session';
2. import passport from 'passport';
3. import { Strategy as GoogleStrategy } from 'passport-google-oauth2';
#
4. app.use (passport.initialize());
5. app.use (passport.session());
#
6. passport.use(new LocalStrategy (authUser));
   -  Define the "authUser" function, and authenticate the user. 
7. passport.serializeUser();
   - attach the {authenticate_user} to req.session.passport.user.{authenticated_user}   
   passport.deserializeUser();
   - get the {authenticated_user} for the session from "req.session.passport.user.{authenticated_user}, and attach it to req.user.{authenticated_user}
#
8. app.post("/login", passport.authenticate('local', {
     successRedirect: "/dashboard",
     failureRedirect: "/login",
   }));
   - Use passport.authenticate() in the "login" route and define the success and failure redirects i.e.
9. Use the “req.isAuthenticated()” function to protect logged in routes
10. Use “req.logOut()” to clear the sessions object, and log the user out
(((((( 3 ))))))
Testing with playground first
# Use this URL for testing "backend" with Google OAuth2 Playground
#GOOGLE_OAUTH2_CALLBACK_URL=https://developers.google.com/oauthplayground
(((((( 4 ))))))
Testing with local code
(((((( 5 ))))))
===================================================
Here is the text version of the codebase (20250827).
===================================================
./bin/www
     1	#!/usr/bin/env node
     2	/**
     3	 * Module dependencies.
     4	 */
     5	import app from '../app.js';
     6	import createDebug from 'debug';
     7	const debug = createDebug('my-app:server');
     8	import http from 'http';
     9	import dotenv from "dotenv";
    10	dotenv.config();
    11	/**
    12	 * Get port from environment and store in Express.
    13	 */
    14	var port = normalizePort(process.env.PORT);
    15	app.set('port', port);
    16	/**
    17	 * Create HTTP server.
    18	 */
    19	var server = http.createServer(app);
    20	/**
    21	 * Listen on provided port, on all network interfaces.
    22	 */
    23	server.listen(port);
    24	server.on('error', onError);
    25	server.on('listening', onListening);
    26	/**
    27	 * Normalize a port into a number, string, or false.
    28	 */
    29	function normalizePort(val) {
    30	  var port = parseInt(val, 10);
    31	  if (isNaN(port)) {
    32	    // named pipe
    33	    return val;
    34	  }
    35	  if (port >= 0) {
    36	    // port number
    37	    return port;
    38	  }
    39	  return false;
    40	}
    41	/**
    42	 * Event listener for HTTP server "error" event.
    43	 */
    44	function onError(error) {
    45	  if (error.syscall !== 'listen') {
    46	    throw error;
    47	  }
    48	  var bind = typeof port === 'string'
    49	    ? 'Pipe ' + port
    50	    : 'Port ' + port;
    51	  // handle specific listen errors with friendly messages
    52	  switch (error.code) {
    53	    case 'EACCES':
    54	      console.error(bind + ' requires elevated privileges');
    55	      process.exit(1);
    56	      break;
    57	    case 'EADDRINUSE':
    58	      console.error(bind + ' is already in use');
    59	      process.exit(1);
    60	      break;
    61	    default:
    62	      throw error;
    63	  }
    64	}
    65	/**
    66	 * Event listener for HTTP server "listening" event.
    67	 */
    68	function onListening() {
    69	  var addr = server.address();
    70	  var bind = typeof addr === 'string'
    71	    ? 'pipe ' + addr
    72	    : 'port ' + addr.port;
    73	  debug('Listening on ' + bind);
    74	}
./.gitignore
     1	# Logs
     2	logs
     3	*.log
     4	npm-debug.log*
     5	yarn-debug.log*
     6	yarn-error.log*
     7	lerna-debug.log*
     8	# Diagnostic reports (https://nodejs.org/api/report.html)
     9	report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
    10	# Runtime data
    11	pids
    12	*.pid
    13	*.seed
    14	*.pid.lock
    15	# Directory for instrumented libs generated by jscoverage/JSCover
    16	lib-cov
    17	# Coverage directory used by tools like istanbul
    18	coverage
    19	*.lcov
    20	# nyc test coverage
    21	.nyc_output
    22	# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
    23	.grunt
    24	# Bower dependency directory (https://bower.io/)
    25	bower_components
    26	# node-waf configuration
    27	.lock-wscript
    28	# Compiled binary addons (https://nodejs.org/api/addons.html)
    29	build/Release
    30	# Dependency directories
    31	node_modules/
    32	jspm_packages/
    33	# Snowpack dependency directory (https://snowpack.dev/)
    34	web_modules/
    35	# TypeScript cache
    36	*.tsbuildinfo
    37	# Optional npm cache directory
    38	.npm
    39	# Optional eslint cache
    40	.eslintcache
    41	# Optional stylelint cache
    42	.stylelintcache
    43	# Optional REPL history
    44	.node_repl_history
    45	# Output of 'npm pack'
    46	*.tgz
    47	# Yarn Integrity file
    48	.yarn-integrity
    49	# dotenv environment variable files
    50	.env
    51	.env.*
    52	!.env.example
    53	# parcel-bundler cache (https://parceljs.org/)
    54	.cache
    55	.parcel-cache
    56	# Next.js build output
    57	.next
    58	out
    59	# Nuxt.js build / generate output
    60	.nuxt
    61	dist
    62	# Gatsby files
    63	.cache/
    64	# Comment in the public line in if your project uses Gatsby and not Next.js
    65	# https://nextjs.org/blog/next-9-1#public-directory-support
    66	# public
    67	# vuepress build output
    68	.vuepress/dist
    69	# vuepress v2.x temp and cache directory
    70	.temp
    71	.cache
    72	# Sveltekit cache directory
    73	.svelte-kit/
    74	# vitepress build output
    75	**/.vitepress/dist
    76	# vitepress cache directory
    77	**/.vitepress/cache
    78	# Docusaurus cache and generated files
    79	.docusaurus
    80	# Serverless directories
    81	.serverless/
    82	# FuseBox cache
    83	.fusebox/
    84	# DynamoDB Local files
    85	.dynamodb/
    86	# Firebase cache directory
    87	.firebase/
    88	# TernJS port file
    89	.tern-port
    90	# Stores VSCode versions used for testing VSCode extensions
    91	.vscode-test
    92	# yarn v3
    93	.pnp.*
    94	.yarn/*
    95	!.yarn/patches
    96	!.yarn/plugins
    97	!.yarn/releases
    98	!.yarn/sdks
    99	!.yarn/versions
   100	# Vite logs files
   101	vite.config.js.timestamp-*
   102	vite.config.ts.timestamp-*
   103	######################################
   104	# Lcys specific <BEGIN>
   105	######################################
   106	# 1. Ignore MacOS system files
   107	.DS_Store
   108	# 2. Ignore package-lock.json
   109	package-lock.json
   110	######################################
   111	# Lcys specific <END>
   112	######################################
   113	# ignore idea folder
   114	.idea./package.json
     1	{
     2	  "name": "nodejs-project",
     3	  "version": "0.0.0",
     4	  "private": true,
     5	  "type": "module",
     6	  "scripts": {
     7	    "start": "node ./bin/www"
     8	  },
     9	  "dependencies": {
    10	    "cookie-parser": "~1.4.4",
    11	    "debug": "~2.6.9",
    12	    "dotenv": "^17.2.1",
    13	    "ejs": "^3.1.10",
    14	    "express": "^4.21.2",
    15	    "express-session": "^1.18.2",
    16	    "http-errors": "~1.6.3",
    17	    "morgan": "^1.10.1",
    18	    "passport": "^0.7.0",
    19	    "passport-google-oauth2": "^0.2.0"
    20	  }
    21	}
./.env
     1	PORT=3030
     2	# Email Configuration
     3	#   Gmail does not allow email address lcys2025, 
     4	#     changed to "allowable" email address 
     5	#     lcys20252025 (with an extra 2025 [i.e. 20252025])
     6	#
     7	#EMAIL="lcys20252025@gmail.com"  
     8	#EMAIL_PASSWORD="egey wvke ezfv bano"
     9	#
    10	GOOGLE_CLIENT_ID="217581081754-e4u33ve6ml64ca6u58udrbrva797bagm.apps.googleusercontent.com"
    12	#
    13	GOOGLE_OAUTH2_CALLBACK_URL=http://localhost:3030/auth/google/callback
    14	#
    15	# Use this URL for testing "backend" with Google OAuth2 Playground
    16	#GOOGLE_OAUTH2_CALLBACK_URL=https://developers.google.com/oauthplayground
./views/dashboard.ejs
     1	<h1> <%= name %> is logged in </h1>
     2	<form action="/logout" method="POST">
     3	     <button type="submit"> Logout </button>
     4	</form>./views/login.ejs
     1	<h1> Google Login </h1>
     2	  Click here to authenticate with Google
     3	<form action="/auth/google" method="GET">
     4	  <button type="submit"> GOOGLE BUTTON </button>
     5	</form>./views/index.ejs
     1	<!DOCTYPE html>
     2	<html>
     3	  <head>
     4	    <title><%= company_name %></title>
     5	    <link rel='stylesheet' href='/stylesheets/style.css' />
     6	  </head>
     7	  <body>
     8	    <h1><%= company_name %></h1>
     9	    <p>Welcome! <%= company_name %></p>
    10	  </body>
    11	</html>
./views/error.ejs
     1	<h1><%= message %></h1>
     2	<h2><%= error.status %></h2>
     3	<pre><%= error.stack %></pre>
./routes/logout.js
     1	import express from 'express';
     2	const router = express.Router();
     3	router.post('/', function(req, res, next) {
     4	  // Call req.logout with a callback function
     5	  req.logout(function(err) {
     6	    if (err) {
     7	      // Handle any errors that occur during logout
     8	      return next(err);
     9	    }
    10	    // Redirect the user to a desired page after successful logout
    11	    res.redirect('/');
    12	  });
    13	});
    14	export default router;
./routes/auth.js
     1	import express from 'express';
     2	import passport from 'passport';
     3	const router = express.Router();
     4	router.get('/google',
     5	  passport.authenticate('google', { scope:
     6	      [ 'profile', 'email' ] }
     7	));
     8	router.get('/google/callback',
     9	    passport.authenticate( 'google', {
    10	        successRedirect: '/dashboard',
    11	        failureRedirect: '/login'
    12	}));
    13	export default router;
./routes/users.js
     1	import express from 'express';
     2	const router = express.Router();
     3	/* GET users listing. */
     4	router.get('/', function(req, res, next) {
     5	  res.send('respond with a resource');
     6	});
     7	export default router;
./routes/index.js
     1	import express from 'express';
     2	const router = express.Router();
     3	/* GET home page. */
     4	router.get('/', function(req, res, next) {
     5	  res.render('index', { company_name: process.env.COMPANY_NAME });
     6	});
     7	export default router;./routes/login.js
     1	import express from 'express';
     2	const router = express.Router();
     3	router.get("/", (req, res) => {
     4	    res.render("login.ejs")
     5	});
     6	export default router;
./routes/dashboard.js
     1	import express from 'express';
     2	const router = express.Router();
     3	const checkAuthenticated = (req, res, next) => {
     4	  if (req.isAuthenticated()) { return next() }
     5	  res.redirect("/login")
     6	}
     7	router.get("/", checkAuthenticated, (req, res) => {
     8	  res.render("dashboard.ejs", {name: req.user.displayName})
     9	});
    10	export default router;
./app.js
     1	import createError from 'http-errors';
     2	import express from 'express';
     3	import path from 'path';
     4	import cookieParser from 'cookie-parser';
     5	import logger from 'morgan';
     6	import { fileURLToPath } from 'url';
     7	import dotenv from "dotenv";
     8	// passport and google auth imports
     9	import session from 'express-session';
    10	import passport from 'passport';
    11	import { Strategy as GoogleStrategy } from 'passport-google-oauth2';
    12	import indexRouter from './routes/index.js';
    13	import usersRouter from './routes/users.js';
    14	import loginRouter from './routes/login.js';
    15	import authRouter from './routes/auth.js';
    16	import dashboardRouter from './routes/dashboard.js';
    17	import logoutRouter from './routes/logout.js';
    18	// .env variables
    19	dotenv.config(); 
    20	const __filename = fileURLToPath(import.meta.url);
    21	const __dirname = path.dirname(__filename);
    22	var app = express();
    23	// view engine setup
    24	app.set('views', path.join(__dirname, 'views'));
    25	app.set('view engine', 'ejs');
    26	app.use(logger('dev'));
    27	app.use(express.json());
    28	app.use(express.urlencoded({ extended: false }));
    29	app.use(cookieParser());
    30	app.use(express.static(path.join(__dirname, 'public')));
    31	//Middleware
    32	app.use(session({
    33	    secret: "lcys2025_secret",
    34	    resave: false ,
    35	    saveUninitialized: true ,
    36	}));
    37	// passport and google auth setup
    38	app.use (passport.initialize());
    39	app.use (passport.session());
    40	const authUser = (request, accessToken, refreshToken, profile, done) => {
    41	  return done(null, profile);
    42	}
    43	const GOOGLE_OAUTH2_CALLBACK_URL = process.env.GOOGLE_OAUTH2_CALLBACK_URL;
    44	const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;
    45	const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;
    46	console.log(GOOGLE_OAUTH2_CALLBACK_URL);
    47	console.log(GOOGLE_CLIENT_ID);
    48	console.log(GOOGLE_CLIENT_SECRET);
    49	passport.use(new GoogleStrategy({
    50	    clientID: GOOGLE_CLIENT_ID,
    51	    clientSecret: GOOGLE_CLIENT_SECRET,
    52	    callbackURL: GOOGLE_OAUTH2_CALLBACK_URL,
    53	    passReqToCallback: true
    54	  }, authUser)
    55	);
    56	// api routes (highest level)
    57	app.use('/', indexRouter);
    58	app.use('/users', usersRouter);
    59	app.use('/login', loginRouter);
    60	app.use('/auth', authRouter);
    61	app.use('/dashboard', dashboardRouter);
    62	app.use('/logout', logoutRouter);
    63	passport.serializeUser(function(user, done) {
    64	    console.log(`\n--------> Serialize User:`);
    65	    console.log(user);
    66	    done(null, user);
    67	});
    68	passport.deserializeUser(function(user, done) {
    69	    console.log(`\n--------> Deserialize User:`);
    70	    console.log(user);
    71	    done(null, user);
    72	});
    73	// catch 404 and forward to error handler
    74	app.use(function(req, res, next) {
    75	  next(createError(404));
    76	});
    77	// error handler
    78	app.use(function(err, req, res, next) {
    79	  // set locals, only providing error in development
    80	  res.locals.message = err.message;
    81	  res.locals.error = req.app.get('env') === 'development' ? err : {};
    82	  // render the error page
    83	  res.status(err.status || 500);
    84	  res.render('error');
    85	});
    86	export default app;

